// Code generated by protoc-gen-go.
// source: block/block.proto
// DO NOT EDIT!

/*
Package block is a generated protocol buffer package.

It is generated from these files:
	block/block.proto

It has these top-level messages:
	ReadRequest
	ReadResponse
	WriteRequest
	WriteResponse
*/
package block

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ReadRequest struct {
	Offset int64 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Length int64 `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReadResponse struct {
	Result  string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	Context []byte `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *ReadResponse) Reset()                    { *m = ReadResponse{} }
func (m *ReadResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()               {}
func (*ReadResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type WriteRequest struct {
	Offset  int64  `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Length  int64  `protobuf:"varint,2,opt,name=length" json:"length,omitempty"`
	Context []byte `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WriteResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *WriteResponse) Reset()                    { *m = WriteResponse{} }
func (m *WriteResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()               {}
func (*WriteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ReadRequest)(nil), "block.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "block.ReadResponse")
	proto.RegisterType((*WriteRequest)(nil), "block.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "block.WriteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Transfer service

type TransferClient interface {
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error)
}

type transferClient struct {
	cc *grpc.ClientConn
}

func NewTransferClient(cc *grpc.ClientConn) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := grpc.Invoke(ctx, "/block.Transfer/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/block.Transfer/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transfer service

type TransferServer interface {
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	Write(context.Context, *WriteRequest) (*WriteResponse, error)
}

func RegisterTransferServer(s *grpc.Server, srv TransferServer) {
	s.RegisterService(&_Transfer_serviceDesc, srv)
}

func _Transfer_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TransferServer).Read(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Transfer_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TransferServer).Write(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Transfer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "block.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Read",
			Handler:    _Transfer_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Transfer_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0xca, 0xc9, 0x4f,
	0xce, 0xd6, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x8e, 0x92, 0x2d,
	0x17, 0x77, 0x50, 0x6a, 0x62, 0x4a, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x18, 0x17,
	0x5b, 0x7e, 0x5a, 0x5a, 0x71, 0x6a, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x94, 0x07,
	0x12, 0xcf, 0x49, 0xcd, 0x4b, 0x2f, 0xc9, 0x90, 0x60, 0x82, 0x88, 0x43, 0x78, 0x4a, 0x0e, 0x5c,
	0x3c, 0x10, 0xed, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x20, 0x75, 0x45, 0xa9, 0xc5, 0xa5, 0x39,
	0x10, 0xfd, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x04, 0x17, 0x7b, 0x72, 0x7e, 0x5e, 0x49, 0x6a, 0x45,
	0x09, 0xd8, 0x00, 0x9e, 0x20, 0x18, 0x57, 0x29, 0x82, 0x8b, 0x27, 0xbc, 0x28, 0xb3, 0x24, 0x95,
	0x4c, 0x17, 0x20, 0x9b, 0xcc, 0x8c, 0x6a, 0xb2, 0x3a, 0x17, 0x2f, 0xd4, 0x64, 0xfc, 0x8e, 0x33,
	0x2a, 0xe6, 0xe2, 0x08, 0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4b, 0x2d, 0x12, 0x32, 0xe4, 0x62, 0x01,
	0x79, 0x48, 0x48, 0x48, 0x0f, 0x12, 0x58, 0x48, 0x81, 0x23, 0x25, 0x8c, 0x22, 0x06, 0x31, 0x54,
	0x89, 0x41, 0xc8, 0x84, 0x8b, 0x15, 0x6c, 0x8f, 0x10, 0x4c, 0x1e, 0xd9, 0x3f, 0x52, 0x22, 0xa8,
	0x82, 0x30, 0x5d, 0x49, 0x6c, 0xe0, 0x68, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x38,
	0xef, 0x6e, 0x9b, 0x01, 0x00, 0x00,
}
